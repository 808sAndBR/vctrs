% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assert.R
\name{vec_is_vector}
\alias{vec_is_vector}
\title{Is an object a vector?}
\usage{
vec_is_vector(x)
}
\arguments{
\item{x}{An object.}
}
\description{
A vector is a collection of values. In practical terms, a vector is
something that can be a column of a data frame. The opposite of a
vector is a scalar. Such an object cannot be \link[=vec_slice]{sliced},
nor can it be a data frame column.
}
\section{Dispatch}{


This function is internally generic:
\itemize{
\item Atomic vectors are always vectors.
\item Bare lists are vectors.
\item Data frames are always vectors.
\item Non-vector base types are always scalars.
}

Only lists can be overriden by implementing an S3 method for
\code{vec_is_vector()}.
}

\examples{
# Atomic vectors are always vectors:
vec_is_vector(1:2)
vec_is_vector(structure(1:2, class = "foo"))

# Bare lists and data frames are vectors:
vec_is_vector(list(1, 2))
vec_is_vector(mtcars)

# S3 lists need to explicitly implement `vec_is_vector()` to be
# treated as lists. They are treated as scalars by default:
fit <- stats::lm(disp ~ drat, mtcars)
vec_is_vector(fit)

# Other base types are never vectors:
vec_is_vector(quote(foo(bar)))
vec_is_vector(~foo)
vec_is_vector(function() NULL)
}
