% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assert.R
\name{vec_is_vector}
\alias{vec_is_vector}
\title{Is an object a vector?}
\usage{
vec_is_vector(x)
}
\arguments{
\item{x}{An object.}
}
\description{
A data vector is a collection of values like a logical vector, a
factor, or a date vector. Vectors can be \link[=vec_slice]{sliced} and
can be assigned as data frame columns. The opposite of a vector is
a scalar. For example, a function is not a vector, and neither is a
linear model. An environment is a collection of values but it
cannot be a data frame column and so is not a vector.

Compared to base R our definition is both more generic and
constrained. In base R, anything that is an atomic vector or a list
is a vector, even a model fit object (\code{\link[base:is.vector]{base::is.vector()}} returns
\code{TRUE} for these objects). For the most part, functions calls
implement the vector interface and can generally be treated as
vectors. In vctrs, all of these objects are scalars.
}
\section{Dispatch}{


This function is internally generic:
\itemize{
\item Atomic vectors are always vectors, regardless of their class.
\item Bare lists are vectors.
\item Data frames are always vectors.
\item Other objects like functions and calls are always scalar.
\item S3 objects built on top of lists are scalar by default.
}

The behaviour of \code{vec_is_vector()} can be overridden for S3 objects
built on top of lists by providing a method. If you build your
class on top of \code{\link[=new_vctr]{vctrs_vctr}} (which we recommend), you
don't need to override it.
}

\examples{
# Atomic vectors are always vectors:
vec_is_vector(1:2)
vec_is_vector(structure(1:2, class = "foo"))

# Bare lists and data frames are vectors:
vec_is_vector(list(1, 2))
vec_is_vector(mtcars)

# S3 lists need to explicitly implement `vec_is_vector()` to be
# treated as lists. They are treated as scalars by default:
fit <- stats::lm(disp ~ drat, mtcars)
vec_is_vector(fit)

# Other base types are never vectors:
vec_is_vector(quote(foo(bar)))
vec_is_vector(~foo)
vec_is_vector(function() NULL)
}
