% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/table.R
\name{tbl_is}
\alias{tbl_is}
\alias{tbl_assert}
\alias{tbl_slice}
\alias{tbl_ptype}
\title{Generics for tabular vectors}
\usage{
tbl_is(x)

tbl_assert(x)

tbl_slice(x, i)

tbl_ptype(x)
}
\arguments{
\item{x}{A tabular vector.}

\item{i}{An integer, character or logical vector specifying the positions or
names of the observations to get/set.
Specify \code{TRUE} to index all elements (as in \code{x[]}), or \code{NULL}, \code{FALSE} or
\code{integer()} to index none (as in \code{x[NULL]}).}
}
\description{
\Sexpr[results=rd, stage=render]{vctrs:::lifecycle("experimental")}

These generics make it possible to work with tables, i.e. vectors
of dimension 2 like data frames and matrices. The main motivation
of this API is to support colwise operations such as slicing
columns. Operating across columns requires slightly different
semantics and concepts than rowwise operations:
\itemize{
\item A tabular prototype is a zero-rows, zero-cols table. In order for
your tabular class to be compatible with vctrs, it needs to
support such empty instances.
\item The vector type of a data frame includes its columns (their names
and their types). The tabular type of a data frame doesn't.
}

The details and theory of tabular operations are in development and
likely to change in the future.
}
