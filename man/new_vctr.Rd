% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vctr.R
\name{new_vctr}
\alias{new_vctr}
\title{vctr S3 class}
\usage{
new_vctr(.data, ..., class)
}
\arguments{
\item{...}{Name-value pairs defining attributes}

\item{class}{Name of subclass.}

\item{x}{Foundation of class. Must be a vector}
}
\description{
This abstract class provides a set of useful default methods that makes it
considerably easier to get started with a new S3 vector class.
}
\section{Recommended workflow}{

\enumerate{
\item Start by creating a low-level constructor. It should be called
\code{new_myclass()}, and should check the types (but not the values)
of its inputs.
\item Depending on the class create either a helper \code{myclass()}, a coercer
\code{as_myclass()}, or both. A helper should construct valid values then
pass on to constructor. A coercer should either check values are correct,
or rely on the helper. Avoid defining validation code in multiple
places.
\item Define a useful \code{format.myclass()} method. This will give default
\code{print()} and \code{as.character()} methods that should be adequate for
most classes. Be warned: a good format method may be as much work
as the rest of the class put together!
\item If attributes depend on the data, you'll need to provide a
\code{reconstruct()} method that recomputes the values. If attributes are
paramters of the type, provide a \code{vec_type_string()} method that displays
them.
}

The vctrs super class provides \code{as.data.frame()}, \code{[[}, \code{[}, \code{as.list()},
and \code{rep()} methods; it is unlikely that you should need to redefine for
you own class. \code{[[<-} and \code{[<-} use \code{vec_cast()} to cast \code{value} to the
same type as \code{x}; they will work once you have fleshed out your \code{vec_type2()}
and \code{vec_cast()} methods.
}

\keyword{internal}
