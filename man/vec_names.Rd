% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/names.R
\name{vec_names}
\alias{vec_names}
\alias{vec_as_names}
\title{Retrieve and repair names}
\usage{
vec_names(x, ..., repair = c("minimal", "unique", "universal"),
  quiet = FALSE)

vec_as_names(names, ..., repair = c("minimal", "unique", "universal"),
  quiet = FALSE)
}
\arguments{
\item{x}{A vector.}

\item{...}{These dots are for future extensions and must be empty.}

\item{repair}{\itemize{
\item Minimal names are never \code{NULL} or \code{NA}. When an element doesn't
have a name, its minimal name is an empty string.
\itemize{
\item Unique names are unique. A suffix is appended to duplicate
names to make them unique.
\item Universal names are unique and syntactic, meaning that you can
safely use the names as variables without causing a syntax
error.
}

See \code{\link[=vec_repair_names]{vec_repair_names()}} for a complete overview of names repair.
}}

\item{quiet}{By default, the user is informed of any renaming
caused by repairing the names. This only concerns unique and
universal repairing. Set \code{quiet} to \code{TRUE} to silence the
messages.}

\item{names}{A character vector.}
}
\description{
Like \code{base::names()}, \code{vec_names()} retrieves the names of a
vector. It has the following differences:
\itemize{
\item It always returns \strong{minimal names}. Whereas \code{names()} returns
\code{NULL} when a vector doesn't have names, \code{vec_names()} returns a
character vector of empty strings by default. \code{NA} names are also
converted to \code{""}. You can control how names are repaired with
the \code{repair} argument.
\item With arrays it returns the row names. With data frames it returns
an empty character vector as long as the number of rows.
}

\code{vec_as_names()} takes a character vector of names and repairs it
according to the \code{repair} argument. It is the r-lib and tidyverse
equivalent of \code{\link[base:make.names]{base::make.names()}}.
}
\examples{
# By default, `vec_names()` returns minimal names:
vec_names(1:3)

# You can make them unique:
vec_names(1:3, repair = "unique")

# Universal repairing fixes any non-syntactic name:
x <- c("_foo" = 1, "+" = 2)
vec_names(x, repair = "universal")

}
