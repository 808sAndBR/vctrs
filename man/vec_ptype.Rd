% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prototype.R
\name{vec_ptype}
\alias{vec_ptype}
\title{Create a new prototype}
\usage{
vec_ptype(..., .ptype = NULL)
}
\arguments{
\item{...}{Vectors inputs}

\item{.ptype}{If \code{NULL}, the default, the output type is determined by
computing the common type across all elements of \code{...}.

Alternatively, you can supply \code{.ptype} to give the output known type.
If \code{getOption("vctrs.no_guessing")} is \code{TRUE} you must supply this value:
this is a convenient way to make production code demand fixed types.}
}
\value{
A prototype
}
\description{
This function is aimed at developers, but may also be useful for users who
want to explore the type system interactively. Use this function to find the
common type from a set of inputs.
}
\details{
This function works by finding the prototype (a zero-length subset) of each
input, then using \code{\link[=Reduce]{Reduce()}} and \code{\link[=vec_type2]{vec_type2()}} to find the common class.
\code{NULL}s and logical vectors that consist only of \code{NA} (including those inside
data frames) are converted to the special \link{unknown} type. This is needed
because bare \code{NA}s should be automatically coercible to every other class.
}
\examples{
# Unknown types ------------------------------------------
vec_ptype()
vec_ptype(NA)
vec_ptype(NULL)

# Vectors ------------------------------------------------
vec_ptype(1:10)
vec_ptype(letters)
vec_ptype(TRUE)

vec_ptype(Sys.Date())
vec_ptype(Sys.time())
vec_ptype(factor("a"))
vec_ptype(ordered("a"))

# Matrices -----------------------------------------------
# The prototype of a matrix includes the number of columns
vec_ptype(array(1, dim = c(1, 2)))
vec_ptype(array("x", dim = c(1, 2)))

# Data frames --------------------------------------------
# The prototype of a data frame includes the prototype of
# every column
vec_ptype(iris)

# The prototype of multiple data frames includes the prototype
# of every column that in any data frame
vec_ptype(
  data.frame(x = TRUE),
  data.frame(y = 2),
  data.frame(z = "a")
)
}
