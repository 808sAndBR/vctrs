% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bind.R
\name{vec_bind}
\alias{vec_bind}
\alias{vec_rbind}
\alias{vec_cbind}
\title{Bind data frames}
\usage{
vec_rbind(..., .type = NULL)

vec_cbind(..., .type = NULL)
}
\arguments{
\item{...}{Data frames, or objects that can be coerced to data frames.
\code{vec_rbind()} ignores names. \code{vec_cbind()} preserves outer names,
combining with inner names if also present. \code{NULL} inputs are ignored.}

\item{.type}{Usually, the type of the output is coerced to a type common to
inputs. Alternatively, you can supply \code{.type} to force the output to
have known type, or to die trying. See \code{\link[=vec_cast]{vec_cast()}} for more details.
\code{.type = character()} and \code{.type = list()} will succeed for all vectors.}
}
\value{
A data frame, or subclass.

If \code{...} is a mix of different data frame subclases, \code{vec_type2()} will
be used to find the common type. For \code{vec_cbind()} only the type of
the container needs to be determined this way, as the columns need only
be recycled to common length, not coerced to common type.

If there are no non-\code{NULL} inputs, the result will be \code{data.frame()}.
}
\description{
This pair of functions binds together data frames, either by rows or by
columns. Row-binding creates a data frame with common type over all
arguments. Column-binding creates a data frame with common length over all
arguments.
}
\examples{
# row binding -----------------------------------------

# common columns are coerced to common type
vec_rbind(
  data.frame(x = 1),
  data.frame(x = FALSE)
)

# unique columns are filled with NAs
vec_rbind(
  data.frame(x = 1),
  data.frame(y = "x")
)

# null inputs are ignored
vec_rbind(
  data.frame(x = 1),
  NULL,
  data.frame(x = 2)
)

# bare vectors are treated as rows
vec_rbind(
  c(x = 1, y = 2),
  c(x = 3)
)

# default names will be supplied if arguments are not named
vec_rbind(
  1:2,
  1:3,
  1:4
)

# column binding --------------------------------------

# each input is recycled to have common length
vec_cbind(
  data.frame(x = 1),
  data.frame(y = 1:3)
)

# bare vectors are treated as columns
vec_cbind(
  data.frame(x = 1),
  y = letters[1:3]
)

# outer names are combined with inner names
vec_cbind(
  x = data.frame(a = 1, b = 2),
  y = 1
)

# duplicate names are flagged
vec_cbind(x = 1, x = 2)

}
