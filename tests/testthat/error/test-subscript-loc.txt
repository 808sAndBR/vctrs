
vec_as_location() checks for mix of negative and missing locations
==================================================================

> vec_as_location(-c(1L, NA), 30)
Error: Negative locations can't have missing values.
i The subscript has a missing value at location 2.

> vec_as_location(-c(1L, rep(NA, 10)), 30)
Error: Negative locations can't have missing values.
i The subscript has 10 missing values at locations 2, 3, 4, 5, 6, ...


vec_as_location() checks for mix of negative and positive locations
===================================================================

> vec_as_location(c(-1L, 1L), 30)
Error: Negative locations can't be mixed with positive locations.
i The subscript has a positive value at location 2.

> vec_as_location(c(-1L, rep(1L, 10)), 30)
Error: Negative locations can't be mixed with positive locations.
i The subscript has 10 missing values at locations 2, 3, 4, 5, 6, ...


num_as_location() optionally forbids negative indices
=====================================================

> num_as_location(dbl(1, -1), 2L, negative = "error")
Error: Must subset with a proper subscript vector.
x `i` contains negative locations.
i These subscripts must be positive integers.


logical subscripts must match size of indexed vector
====================================================

> vec_as_location(c(TRUE, FALSE), 3)
Error: Logical subscripts must match the size of the indexed input.
i The input has size 3.
x The subscript has size 2.


character subscripts require named vectors
==========================================

> vec_as_location(letters[1], 3)
Error: Can't use character names to index an unnamed vector.


vec_as_location() requires integer, character, or logical inputs
================================================================

> vec_as_location(mtcars, 10L)
Error: Must subset with a proper subscript vector.
x `i` has the wrong type `data.frame<
  mpg : double
  cyl : double
  disp: double
  hp  : double
  drat: double
  wt  : double
  qsec: double
  vs  : double
  am  : double
  gear: double
  carb: double
>`.
i These indices must be indicators, locations or names.

> vec_as_location(env(), 10L)
Error: Must subset with a proper subscript vector.
x `i` has the wrong type `environment`.
i These indices must be indicators, locations or names.

> vec_as_location(foobar(), 10L)
Error: Must subset with a proper subscript vector.
x `i` has the wrong type `vctrs_foobar`.
i These indices must be indicators, locations or names.

> vec_as_location(2.5, 3L)
Error: Must subset with a proper subscript vector.
x Lossy cast from `i` <double> to <integer>.

> vec_as_location(list(), 10L)
Error: Must subset with a proper subscript vector.
x `i` has the wrong type `list`.
i These indices must be indicators, locations or names.

> vec_as_location(function() NULL, 10L)
Error: Must subset with a proper subscript vector.
x `i` has the wrong type `closure`.
i These indices must be indicators, locations or names.

> # Idem with custom `arg`
> vec_as_location(env(), 10L, arg = "foo")
Error: Must subset with a proper subscript vector.
x `foo` has the wrong type `environment`.
i These indices must be indicators, locations or names.

> vec_as_location(foobar(), 10L, arg = "foo")
Error: Must subset with a proper subscript vector.
x `foo` has the wrong type `vctrs_foobar`.
i These indices must be indicators, locations or names.

> vec_as_location(2.5, 3L, arg = "foo")
Error: Must subset with a proper subscript vector.
x Lossy cast from `foo` <double> to <integer>.


vec_as_location2() requires integer or character inputs
=======================================================

> vec_as_location2(TRUE, 10L)
Error: Must extract with a single subscript.
x `i` has the wrong type `logical`.
i This subscript must be a location or a name.

> vec_as_location2(mtcars, 10L)
Error: Must extract with a single subscript.
x `i` has the wrong type `data.frame<
  mpg : double
  cyl : double
  disp: double
  hp  : double
  drat: double
  wt  : double
  qsec: double
  vs  : double
  am  : double
  gear: double
  carb: double
>`.
i This subscript must be a location or a name.

> vec_as_location2(env(), 10L)
Error: Must extract with a single subscript.
x `i` has the wrong type `environment`.
i This subscript must be a location or a name.

> vec_as_location2(foobar(), 10L)
Error: Must extract with a single subscript.
x `i` has the wrong type `vctrs_foobar`.
i This subscript must be a location or a name.

> vec_as_location2(2.5, 3L)
Error: Must extract with a single subscript.
x Lossy cast from `i` <double> to <integer>.

> # Idem with custom `arg`
> vec_as_location2(foobar(), 10L, arg = "foo")
Error: Must extract with a single subscript.
x `foo` has the wrong type `vctrs_foobar`.
i This subscript must be a location or a name.

> vec_as_location2(2.5, 3L, arg = "foo")
Error: Must extract with a single subscript.
x Lossy cast from `foo` <double> to <integer>.


vec_as_location2() requires length 1 inputs
===========================================

> vec_as_location2(1:2, 2L)
Error: Must extract with a single subscript.
x `i` has the wrong size 2.
i This subscript must be size 1.

> vec_as_location2(mtcars, 10L)
Error: Must extract with a single subscript.
x `i` has the wrong type `data.frame<
  mpg : double
  cyl : double
  disp: double
  hp  : double
  drat: double
  wt  : double
  qsec: double
  vs  : double
  am  : double
  gear: double
  carb: double
>`.
i This subscript must be a location or a name.

> # Idem with custom `arg`
> vec_as_location2(1:2, 2L, arg = "foo")
Error: Must extract with a single subscript.
x `foo` has the wrong size 2.
i This subscript must be size 1.

> vec_as_location2(mtcars, 10L, arg = "foo")
Error: Must extract with a single subscript.
x `foo` has the wrong type `data.frame<
  mpg : double
  cyl : double
  disp: double
  hp  : double
  drat: double
  wt  : double
  qsec: double
  vs  : double
  am  : double
  gear: double
  carb: double
>`.
i This subscript must be a location or a name.

> vec_as_location2(1:2, 2L, arg = "foo")
Error: Must extract with a single subscript.
x `foo` has the wrong size 2.
i This subscript must be size 1.


vec_as_location2() requires positive integers
=============================================

> vec_as_location2(0, 2L)
Error: Must extract with a single subscript.
x `i` can't be zero.
i This subscript must be a positive integer.

> vec_as_location2(-1, 2L)
Error: Must extract with a single subscript.
x `i` (with value -1) has the wrong sign.
i This subscript must be a positive integer.

> # Idem with custom `arg`
> vec_as_location2(0, 2L, arg = "foo")
Error: Must extract with a single subscript.
x `foo` can't be zero.
i This subscript must be a positive integer.

> # vec_as_location2() fails with NA
> vec_as_location2(na_int, 2L)
Error: Must extract with a single subscript.
x `i` can't be `NA`.
i This subscript can't be missing.

> vec_as_location2(na_chr, 1L, names = "foo")
Error: Must extract with a single subscript.
x `i` can't be `NA`.
i This subscript can't be missing.

> # Idem with custom `arg`
> vec_as_location2(na_int, 2L, arg = "foo")
Error: Must extract with a single subscript.
x `foo` can't be `NA`.
i This subscript can't be missing.


vec_as_location() and variants check for OOB elements
=====================================================

> # Numeric subscripts
> vec_as_location(10L, 2L)
Error: Must index existing elements.
x Can't subset location 10.
i There are only 2 elements.

> vec_as_location2(10L, 2L)
Error: Must index existing elements.
x Can't subset location 10.
i There are only 2 elements.

> # Character subscripts
> vec_as_location("foo", 1L, names = "bar")
Error: Must index existing elements.
x Can't subset element with unknown name `foo`.

> vec_as_location2("foo", 1L, names = "bar")
Error: Must index existing elements.
x Can't subset element with unknown name `foo`.


can optionally extend beyond the end
====================================

> num_as_location(c(1, 3), 1, oob = "extend")
Error: Can't index beyond the end with non-consecutive locations.
i The input has size 1.
x The location 3 is not consecutive to the end.

> num_as_location(c(1:5, 7), 3, oob = "extend")
Error: Can't index beyond the end with non-consecutive locations.
i The input has size 3.
x The locations 4 and 7 are not consecutive.

> num_as_location(c(1:5, 7, 1), 3, oob = "extend")
Error: Can't index beyond the end with non-consecutive locations.
i The input has size 3.
x The locations 4 and 7 are not consecutive.

> num_as_location(c(1:5, 7, 1, 10), 3, oob = "extend")
Error: Can't index beyond the end with non-consecutive locations.
i The input has size 3.
x The locations 4, 7, and 10 are not consecutive.


missing values are supported in error formatters
================================================

> num_as_location(c(1, NA, 2, 3), 1)
Error: Must index existing elements.
x Can't subset locations 2 and 3.
i There are only 1 elements.

> num_as_location(c(1, NA, 3), 1, oob = "extend")
Error: Can't index beyond the end with non-consecutive locations.
i The input has size 1.
x The location 3 is not consecutive to the end.

